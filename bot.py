from telebot import TeleBot
from config import TOKEN
from telebot import types
import random 
from sqlighter import SQlighter
import time
from keyboards import *

bot = TeleBot(TOKEN)


@bot.message_handler(commands = ['start', 'Exit'])
def main(message):

    #–î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –∞–π–¥–∏ —é–∑–µ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç —Ä–∞–Ω–µ–µ
    database = SQlighter('sqlite.db')
    database.add_new_user(message.chat.id)

    bot.send_message(message.chat.id, """
–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–π –∏–≥—Ä—ã –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ: –ø–µ—Ä–µ–¥ –í–∞–º–∏ –ø–æ—è–≤–∏—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–±–ª–æ–∫.
–í—ã –∏ —è –±—É–¥–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å—ä–µ–¥–∞—Ç—å 1, 2 –∏–ª–∏ 3 —è–≥–æ–¥—ã.
–¢–æ—Ç, –∫—Ç–æ —Å—ä–µ—Å—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é (–∏—Å–ø–æ—Ä—á–µ–Ω–Ω–æ–µ) —è–±–ª–æ–∫–æ ‚Äî –ø—Ä–æ–∏–≥—Ä–∞–ª!
–ù–∞—á–Ω—ë–º?
""", parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types = ['text'])

def text_messages(message):
    if message.chat.type == 'private':
        if message.text == '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É':
            msg = bot.send_message(message.chat.id, '–° –∫–∞–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —è–±–ª–æ–∫ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å?\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 20 –¥–æ 100:', reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_link_step)
        
        elif message.text == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
            bot.send_message(message.chat.id, '–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª @Xeonio\nE—Å–ª–∏ –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã –ø–∏—à–∏ –µ–º—É –æ–Ω –ø–æ —Ñ–∏–∫—Å–∏—Ç –º–µ–Ω—è)')

        elif message.text == 'üçé':
            process_game(message.chat.id, 1)

        elif message.text == 'üçéüçé':
            process_game(message.chat.id, 2)
            
        elif message.text == 'üçéüçéüçé':
            process_game(message.chat.id, 3)


        elif message.text == '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            database = SQlighter('sqlite.db')
            chat_id = message.chat.id

            wins = database.get_column(chat_id, 'wins')
            defeats = database.get_column(chat_id, 'defeats')
            giveups = database.get_column(chat_id, 'giveups')

            msg = f"–ü–æ–±–µ–¥: {str(wins)}\n–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {str(defeats)}\n–í—ã —Å–¥–∞–ª–∏—Å—å: {str(giveups)}"

            bot.send_message(message.chat.id, msg)

        elif message.text == '–°–¥–∞—Ç—å—Å—è':
            database = SQlighter('sqlite.db')
            current_giveups = database.get_column(message.chat.id, 'giveups')
            database.update_column(message.chat.id, current_giveups + 1, 'giveups')
            bot.send_message(message.chat.id, '–í—ã —Å–¥–∞–ª–∏—Å—å:(\n–ù–æ –ø–æ—á–µ–º—É –±—ã –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?', parse_mode='html', reply_markup=markup)
        
        elif message.text == '–ü—Ä–∞–≤–∏–ª–∞':
            bot.send_message(message.chat.id, """
–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã

‚Äî –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã —è –ø—Ä–µ–¥–ª–æ–∂—É –í–∞–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–±–ª–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –Ω–∞–º–∏.
‚Äî –ó–∞—Ç–µ–º –º—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±—É–¥–µ–º —Å—ä–µ–¥–∞—Ç—å 1, 2 –∏–ª–∏ 3 —è–±–ª–æ–∫ –Ω–∞ –≤—ã–±–æ—Ä.
‚Äî –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ —Å—ä–µ—Å—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é (–∏—Å–ø–æ—Ä—á–µ–Ω–Ω–æ–µ) —è–±–ª–æ–∫–æ.

–°—ã–≥—Ä–∞–µ–º?
""")
        else:
            bot.send_message(message.chat.id, '–í—ã —è–≤–Ω–æ –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ...')

def process_link_step(message):
    try:
        chat_id = message.chat.id
        number = message.text

        database = SQlighter('sqlite.db')
        database.update_column(chat_id, int(number), 'apples')

        if int(number) < 20 or int(number) > 100:
            bot.send_message(chat_id, """
–í—ã –æ—à–∏–±–ª–∏—Å—å! –í–∞–º –Ω—É–∂–Ω–æ –±—ã–ª–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 20 –¥–æ 100. 
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –∏–≥—Ä–∞—Ç—å –∏–ª–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /Exit
""")
        else:
            quantity = database.get_column(chat_id, 'apples')
            apples = 'üçé' * quantity
            message = f'–ò—Ç–∞–∫, –ø–µ—Ä–µ–¥ –í–∞–º–∏ {number} —è–±–ª–æ–∫: \n\n{apples} \n\n–°—ä–µ—à—å—Ç–µ 3, 2 –∏–ª–∏ 1. –í–∞—à —Ö–æ–¥:'

            bot.send_message(chat_id, message, parse_mode='html', reply_markup=apple_markup)    


    except Exception as e:
        bot.reply_to(message, """
–í—ã –æ—à–∏–±–ª–∏—Å—å! –í–∞–º –Ω—É–∂–Ω–æ –±—ã–ª–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 20 –¥–æ 100. 
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –∏–≥—Ä–∞—Ç—å –∏–ª–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /Exit
""")

def process_game(chat_id, quantity_apple):
    database = SQlighter('sqlite.db')
    quantity = database.get_column(chat_id, 'apples')


    #–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if quantity == 1 or 0:
        
        current_wins = database.get_column(chat_id, 'defeats')
        database.update_column(chat_id, current_wins + 1, 'defeats')

        bot.send_message(chat_id, '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n\n–ü–æ–±–µ–¥–∞ –∑–∞ –º–Ω–æ–π!(\n–•–æ—Ç–∏—Ç–µ –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è?', reply_markup=markup, parse_mode='html')

    else:
        database.update_column(chat_id, quantity - quantity_apple, 'apples')
        quantity_after = database.get_column(chat_id, 'apples')
        apples = 'üçé' * quantity_after

        msg = f"–û—Ç–ª–∏—á–Ω–æ! –í—ã —Å—ä–µ–ª–∏ {str(quantity_apple)} —è–±–ª–æ–∫–æ.\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è:\n\n{apples}\n\n–¢–µ–ø–µ—Ä—å –º–æ–π —Ö–æ–¥!"
        bot.send_message(chat_id, msg, reply_markup=types.ReplyKeyboardRemove())

        time.sleep(0.5)

        if quantity_after == 1:
            current_wins = database.get_column(chat_id, 'wins')
            database.update_column(chat_id, current_wins + 1, 'wins')

            bot.send_message(chat_id, '–í—ã –≤—ã–π–≥—Ä–∞–ª–∏!\n\n–ü–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏!)\n–•–æ—Ç–∏—Ç–µ –µ—â–µ —Ä–∞–∑?', reply_markup=markup, parse_mode='html')

        else:
            if quantity_after == 0:
                
                current_wins = database.get_column(chat_id, 'defeats')
                database.update_column(chat_id, current_wins + 1, 'defeats')

                bot.send_message(chat_id, '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n\n–ü–æ–±–µ–¥–∞ –∑–∞ –º–Ω–æ–π!(\n–•–æ—Ç–∏—Ç–µ –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è?', reply_markup=markup, parse_mode='html')
                
            else:
                random_int = random.randint(1,3)
                summ = quantity_after - random_int

                if summ > 0:
                    database.update_column(chat_id, summ, 'apples')
                    bot_quantity_after = database.get_column(chat_id, 'apples')
                    bot_apples = 'üçé' * bot_quantity_after
                    
                    bot_msg = f'–Ø —Å—ä–µ–¥–∞—é {random_int} —è–±–ª–æ–∫(–æ).\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è:\n\n{bot_apples}\n\n–¢–µ–ø–µ—Ä—å –í–∞—à —Ö–æ–¥!\n–ï—à—å—Ç–µ —è–±–ª–æ–∫–æ:'
                    bot.send_message(chat_id, bot_msg, parse_mode='html', reply_markup=apple_markup)
                else:
                    current_wins = database.get_column(chat_id, 'wins')
                    database.update_column(chat_id, current_wins + 1, 'wins')

                    bot.send_message(chat_id, f'–Ø –ø—Ä–æ–∏–≥—Ä–∞–ª —Å—ä–µ–≤ {random_int} —è–±–ª–æ–∫(–æ)\n\n–ü–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏!)\n–•–æ—Ç–∏—Ç–µ –µ—â–µ —Ä–∞–∑?', reply_markup=markup, parse_mode='html')

if __name__ == '__main__':
    bot.polling(none_stop = True)